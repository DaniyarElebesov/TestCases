pipeline {
  agent any

  options {
    timestamps()
    ansiColor('xterm')
    buildDiscarder(logRotator(numToKeepStr: '30'))
    disableConcurrentBuilds()
  }

  triggers {
    // 02:00 по будням (время = таймзона Jenkins)
    cron('0 2 * * 1-5')
  }

  environment {
    GRADLE_OPTS = '-Dorg.gradle.daemon=false -Dorg.gradle.console=plain'
    JAVA_TOOL_OPTIONS = '-Xms256m -Xmx1024m'
  }

  stages {

    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[url: 'https://github.com/DaniyarElebesov/TestCases.git']],
          extensions: [[$class: 'CleanBeforeCheckout']]
        ])
        sh 'git rev-parse --short HEAD'
      }
    }

    stage('Prepare') {
      steps {
        sh '''
          chmod +x gradlew || true
          ./gradlew --version
        '''
      }
    }

    stage('Run Smoke Tests') {
      steps {
        sh './gradlew clean smokeTest --continue'
      }
      post {
        always {
          // junit отчёты (JUnit5/TestNG)
          junit allowEmptyResults: true, testResults: 'build/test-results/**/*.xml'
          // артефакты и результаты allure
          archiveArtifacts artifacts: 'build/allure-results/**, build/reports/**, build/logs/**', fingerprint: true, allowEmptyArchive: true
        }
      }
    }

    stage('Generate Allure Report') {
      steps {
        // Если в проекте есть gradle-таск allureReport — он создаст папку allure-report/
        // Если таска нет — просто не упадём; jar может использовать и results, но обычно ждёт allure-report
        sh '''
          set +e
          ./gradlew allureReport
          EXIT=$?
          if [ $EXIT -ne 0 ]; then
            echo "No allureReport task or failed — continuing with allure-results only"
          fi
          set -e
          ls -la || true
          ls -la build || true
          ls -la build/allure-results || true
          ls -la build/reports || true
          ls -la allure-report || true
        '''
      }
    }

    stage('Download Allure Notifications Jar') {
      steps {
        sh '''
          # Переход на уровень выше как в твоих шагах
          cd ..
          FILE=allure-notifications-4.8.0.jar
          if [ ! -f "$FILE" ]; then
            wget -q https://github.com/qa-guru/allure-notifications/releases/download/4.8.0/allure-notifications-4.8.0.jar
          fi
          ls -la "$FILE"
        '''
      }
    }

    stage('Send Slack Notification') {
      steps {
        script {
          // Если настроен секрет в Jenkins Credentials (Kind: Secret text, ID: slack-bot-token),
          // аккуратно подставим его в notifications/config.json; иначе используем токен как в репозитории.
          withCredentials([string(credentialsId: 'slack-bot-token', variable: 'SLACK_BOT_TOKEN')]) {
            sh '''
              set -e
              # Возвращаемся в рабочую директорию джобы
              cd "$WORKSPACE"

              # Подменим токен в конфиге, только если переменная непуста
              if [ -n "$SLACK_BOT_TOKEN" ]; then
                echo "Injecting Slack token from Jenkins credentials into notifications/config.json"
                # Осторожная замена значения поля "token" на секрет
                sed -i.bak -E 's/"token"\\s*:\\s*".*"/"token": "'$SLACK_BOT_TOKEN'"/' notifications/config.json
              else
                echo "No Jenkins credential provided; using token as-is from notifications/config.json"
              fi

              # На всякий случай покажем ключевые поля (без токена)
              jq '{base: .base, slack: {replyTo: .slack.replyTo}}' notifications/config.json || true

              # Запуск уведомления (jar лежит в родительской директории согласно твоим шагам)
              java "-DconfigFile=notifications/config.json" -jar ../allure-notifications-4.8.0.jar || true
            '''
          }
        }
      }
      post {
        success { echo '✅ Slack notification step completed.' }
        unsuccessful { echo '⚠️ Slack notification step finished with issues (check console output).' }
      }
    }
  }

  post {
    success {
      echo "✅ ${env.JOB_NAME} #${env.BUILD_NUMBER} SUCCESS — Allure & Slack done (if configured)."
    }
    unstable {
      echo "⚠️ ${env.JOB_NAME} #${env.BUILD_NUMBER} UNSTABLE — check failing tests."
    }
    failure {
      echo "❌ ${env.JOB_NAME} #${env.BUILD_NUMBER} FAILURE."
    }
    always {
      // Отображение отчёта в Jenkins (если установлен Allure Jenkins Plugin)
      // Примечание: плагин читает allure-results; само HTML-создание делает gradle allureReport
      allure([
        includeProperties: false,
        jdk: '',
        results: [[path: 'build/allure-results']],
        reportBuildPolicy: 'ALWAYS'
      ])

      cleanWs(deleteDirs: true, notFailBuild: true)
    }
  }
}
